#!/usr/bin/env python3
import argparse
from case_control_filter.case_control_filter import main


def get_options():
    parser = argparse.ArgumentParser(
        description='''Filter case/control pair VCF based on genotype and
        other format fields.''')
    parser.add_argument('vcf', help='Input VCF file')
    parser.add_argument('-o', '--output', help='Output VCF/BCF file')
    parser.add_argument('-t', '--case', '--tumor', nargs='+', default=[],
                        help='ID of case sample(s)')
    parser.add_argument('-n', '--control', nargs='+', default=[],
                        help='ID of control sample(s)')
    parser.add_argument('--ignore_genotypes', action='store_true',
                        help='''Do not use GT calls for filtering. Use this
                        option to ignore genotype calls and only filter using
                        other options (below).''')
    parser.add_argument('--case_expressions', nargs='+',
                        help='''Require case sample genotypes to match these
                        expressions. If more than one case sample is provided,
                        default behaviour is to require only one of these
                        samples to match given expressions. For example, to
                        only retain variants with a minimum GQ of 20 in at
                        least one case sample use "GQ > 20". If you require 2
                        or more samples to match an expression add the minimum
                        number as the fourth part of your expression (e.g. "GQ
                        > 20 2"). If you require ALL cases to match an
                        expression you can use "GQ > 20 all". You may also
                        combine expressions with logical (and/or) operators.
                        Parentheses are not supported. See the README for more
                        details.''')
    parser.add_argument('--control_expressions', nargs='+',
                        help='''Require control sample genotypes to match
                        these expressions. The same rules apply as for
                        --case_expressions. For example, to only retain
                        variants with an ALT AD less than 2 in all control
                        samples use "AD < 2 all".''')
    parser.add_argument('--min_case_vaf', type=float, help='''Minimum VAF for
                        case genotypes. Filter variants unless at least one
                        case sample has a VAF >= this value. VAF is
                        calculated using standard AD FORMAT fields if present.
                        Non-standard fields are supported for Platypus, Strelka
                        and SvABA.''')
    parser.add_argument('--max_control_vaf', type=float, help='''Maximum VAF
                        for control genotypes. Filter variants if any control
                        sample has a VAF >= this value. VAF is calculated using
                        standard AD FORMAT fields if present. Non-standard
                        fields are supported for Platypus, Strelka and
                        SvABA''')
    parser.add_argument('--vaf_ratio', type=float, help='''Filter variants if
                        (case VAF) / (control VAF) is less than this value. If
                        more than one sample is provided for case and/or
                        control samples the VAF ration will be calculated from
                        the samples with the maximum VAF. VAF is calcaulted as
                        for --min_case_vaf/--max_control_vaf options.''')
    parser.add_argument('--info_tag', metavar='TAGNAME', help='''Add bitwise
                        flag with this tag to the INFO field of your output.
                        Bits are set in the flag indicating which ALT alleles
                        match all parameters provided by the user.''')
    parser.add_argument('--progress_interval', type=int, metavar='N',
                        default=100_000, help='''Report progress every N
                        variants. Default=100_000.''')
    parser.add_argument('--quiet', action='store_true', help='''Suppress
                        progress messages and only show warnings.''')
    return parser.parse_args()


if __name__ == '__main__':
    args = get_options()
    main(**vars(args))
